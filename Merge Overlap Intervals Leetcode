import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class IntervalMerger {

    public int[][] merge(int[][] intervals) {
        // Edge case: if intervals is empty or has only one interval, return it as is.
        if (intervals.length <= 1) {
            return intervals;
        }

        // Sort intervals by the starting point (interval[0]).
        Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0]));

        // Use a list to store the merged intervals.
        List<int[]> merged = new ArrayList<>();

        // Initialize the first interval as the starting point.
        int[] currentInterval = intervals[0];
        merged.add(currentInterval);

        // Iterate through the remaining intervals.
        for (int[] interval : intervals) {
            int currentEnd = currentInterval[1];
            int nextStart = interval[0];
            int nextEnd = interval[1];

            // Check if there is an overlap between the current and next interval.
            if (currentEnd >= nextStart) {
                // Merge by extending the end of the current interval.
                currentInterval[1] = Math.max(currentEnd, nextEnd);
            } else {
                // No overlap, so add the next interval as a new one.
                currentInterval = interval;
                merged.add(currentInterval);
            }
        }

        // Convert the merged list back to a 2D array.
        return merged.toArray(new int[merged.size()][]);
    }

    public static void main(String[] args) {
        IntervalMerger merger = new IntervalMerger();

        // Example intervals array.
        int[][] intervals = { {1, 3}, {2, 6}, {8, 10}, {15, 18} };

        // Merging the intervals.
        int[][] result = merger.merge(intervals);

        // Printing the result.
        System.out.println("Merged Intervals:");
        for (int[] interval : result) {
            System.out.println(Arrays.toString(interval));
        }
    }
}
