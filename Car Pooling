
Problem : Car Pooling

Problem Statement :
There is a car with capacity empty seats. The vehicle only drives east (i.e., it cannot turn around and drive west).

You are given the integer capacity and an array trips where trips[i] = [numPassengersi, fromi, toi] indicates that the ith trip has numPassengersi passengers and the locations to pick them up and drop them off are fromi and toi respectively. The locations are given as the number of kilometers due east from the car's initial location.

Return true if it is possible to pick up and drop off all passengers for all the given trips, or false otherwise.


Example 1:
Input: trips = [[2,1,5],[3,3,7]], capacity = 4
Output: false

Example 2:
Input: trips = [[2,1,5],[3,3,7]], capacity = 5
Output: true
 

Constraints:

1 <= trips.length <= 1000
trips[i].length == 3
1 <= numPassengersi <= 100
0 <= fromi < toi <= 1000
1 <= capacity <= 105


///////////////////////////// SOLUTION CPP ///////////////////////////////

class Solution {
public:
    bool carPooling(vector<vector<int>>& trips, int capacity) {
      // OPTIMAL SOLUTION :: 
      // instead of doing / using map we use the vector and do operation on index while seeing the constraints
      // and check the condition of - and + doing there check the sign if it is negative that mean there should return false
      vector<int> mp(1001,0) ;
      for(vector<int> trip : trips){
            int start = trip[1];
            int end = trip[2];
            // we add the capacity of car where passengers picked up
            mp[start] += trip[0];
            // and where it droped there we have to subtracts that passengers
            mp[end] -= trip[0];
        }
      int cap = capacity ;
      for(int i = 0 ; i < 1001 && cap >= 0 ; i++){ // if goes negation cap that mean we escape
          cap -= mp[i];
      }

      return cap >= 0 ;


      /*  // we are solving it using the HashMap : that gonna naive approach

        // because it is sorted so we have to use ordered map for storing the capacity 
        map<int,int> mp ;
        for(vector<int> trip : trips){
            int start = trip[1];
            int end = trip[2];
            // we add the capacity of car where passengers picked up
            mp[start] += trip[0];
            // and where it droped there we have to subtracts that passengers
            mp[end] -= trip[0];
        }
        // now we iterate through the mp and track count of capacity 
        int cap = 0 ;
         for(auto& m : mp){
            cap += m.second ;

            if(cap > capacity) return false ;
         }
       /* for(auto m = mp.begin() ; m != mp.end() ; m++){
            cap += m->second ;

            if(cap > capacity) return false ;
        }
        

        // otherwise we return true 
        return true ;
        */

    }
};

