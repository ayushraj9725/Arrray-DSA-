Problem : Three way partitioning


Problem Statement : 

Given an array and a range a, b. The task is to partition the array around the range such that the array is divided into three parts.
1) All elements smaller than a come first.
2) All elements in range a to b come next.
3) All elements greater than b appear in the end.
The individual elements of three sets can appear in any order. You are required to return the modified array.

Note: The generated output is true if you modify the given array successfully. Otherwise false.

Geeky Challenge: Solve this problem in O(n) time complexity.

Examples:

Input: arr[] = [1, 2, 3, 3, 4], a = 1, b = 2
Output: true
Explanation: One possible arrangement is: {1, 2, 3, 3, 4}. If you return a valid arrangement, output will be true.

Input: arr[] = [1, 4, 3, 6, 2, 1], a = 1, b = 3
Output: true
Explanation: One possible arrangement is: {1, 3, 2, 1, 4, 6}. If you return a valid arrangement, output will be true.

Constraints:
1 <= arr.size()<= 106
1 <= array[i], a, b <= 109

Expected Complexities
Time Complexity: O(n)
Auxiliary Space: O(1)


/*********************************************************    SOLUTIONS    *********************************************************/


class Solution {
  public:
    // Function to partition the array around the range such
    // that array is divided into three parts.
    void threeWayPartition(vector<int>& arr, int a, int b) {
        // code here
        // using dutch national flag algorithm 
        int n = arr.size();
    
        int i = 0 , j = 0 ;
        int k = n - 1 ;
        
        while(j <= k){
            if(arr[j] < a){
                swap(arr[i],arr[j]);
                i++;
                j++;
            }
            else if(arr[j] >= a && arr[j] <= b){
                j++ ; // do not change this 
            }
            else{
                // it means iterating from high and swap with j
                swap(arr[j],arr[k]);
                k--;
            }
            
        }
        
      /*  
        int i = 0;
        int j = 0;
        int k = 0;
        int n = arr.size();
        int t = 0;
        while(k < n){
            if(arr[t] < a){
                arr[i] = arr[t];
                t++;
                i++;
                j++;
                k++;
            }
            else if(arr[t] >= a && arr[t] <= b){
                arr[j] = arr[t];
                t++;
                j++;
                k++;
            }
            else if(arr[t] > b){
                arr[k] = arr[t];
                t++;
                k++;
            }
        }
        
        */
        
    }
};
