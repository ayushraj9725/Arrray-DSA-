Problem : Maximum Value of an Ordered Triplet I and II

Leetcode Problem no : 2873 and 2874 both 

problem statement : 
You are given a 0-indexed integer array nums.

Return the maximum value over all triplets of indices (i, j, k) such that i < j < k. If all such triplets have a negative value, return 0.

The value of a triplet of indices (i, j, k) is equal to (nums[i] - nums[j]) * nums[k].



Example 1:
Input: nums = [12,6,1,2,7]
Output: 77
Explanation: The value of the triplet (0, 2, 4) is (nums[0] - nums[2]) * nums[4] = 77.
It can be shown that there are no ordered triplets of indices with a value greater than 77. 

Example 2:
Input: nums = [1,10,3,4,19]
Output: 133
Explanation: The value of the triplet (1, 2, 4) is (nums[1] - nums[2]) * nums[4] = 133.
It can be shown that there are no ordered triplets of indices with a value greater than 133.

Example 3:
Input: nums = [1,2,3]
Output: 0
Explanation: The only ordered triplet of indices (0, 1, 2) has a negative value of (nums[0] - nums[1]) * nums[2] = -3. Hence, the answer would be 0.

//////////////////////////////////////////////////////// SOLUTION CPP ///////////////////////////////////////////////////////////'

///////// BRUTE FORCE SOLLUTION ////////////////

class Solution {
    long maximumTripletValue(vector<int> &nums) {
        // we can do it in O(N^3) becauzse constraints is small
        int n = nums.size() ;
        long ans = 0 ;
        for(int i = 0 ; i < n ; i++){
            for(int j = i + 1 ; j < n ; j++){
                for(int k = j + 1 ; k < n ; k++){
                    if(i < j && j < k){
                       long triplets = (long) (nums[i] - nums[j]) * nums[k] ;
                       ans = Math.max(ans,triplets);
                    }
                }
            }
        }

        return ans ;  // Optimized version of code : O(N) c++ code editor
    }
};

/////////// OPTIMAL SOLUTION ///////////////////////////

class Solution {
    #define ll long long
public:
    long long maximumTripletValue(vector<int>& nums) {
        int n =  nums.size();
        //Step-1: Find right_max for all indices
        vector<int> right_max(n);
        int max_val = nums[n-1];//last element
        for(int i=n-2;i>0;--i){
            right_max[i] = max_val;
            max_val = max(max_val,nums[i]);
        }

        //Step-2: Find max_triplet
        ll max_triplet = 0;
        max_val = nums[0];
        for(int i=1;i<n-1;++i){
            max_triplet = max<ll>(max_triplet,(1LL*max_val-nums[i])*right_max[i]);
            max_val = max(max_val,nums[i]);
        }
        return max_triplet;
    }
};

/////// Alternative C++ code ////////////////

class Solution {
    #define ll long long
public:
    long long maximumTripletValue(vector<int>& nums) {
        int n=nums.size();
        ll max_diff = 0;
        ll max_left = 0;
        ll max_triplet = 0;
        for(int i=0;i<n;++i){
            max_triplet = max<ll>(max_triplet,1LL*max_diff*nums[i]);
            max_diff = max<ll>(max_diff,(max_left-nums[i]));
            max_left = max<ll>(max_left,nums[i]);
        }
        return max_triplet;
    }
};


///////////////////////////////////////////////////////// JAVA SOLUTION //////////////////////////////////////////////////////////

///////// BRUTE FORCE SOLUTION ///////////////////

class Solution {
    public long maximumTripletValue(int[] nums) {
        // we can do it in O(N^3) becauzse constraints is small
        int n = nums.length ;
        long ans = 0 ;
        for(int i = 0 ; i < n ; i++){
            for(int j = i + 1 ; j < n ; j++){
                for(int k = j + 1 ; k < n ; k++){
                    if(i < j && j < k){
                       long triplets = (long) (nums[i] - nums[j]) * nums[k] ;
                       ans = Math.max(ans,triplets);
                    }
                }
            }
        }

        return ans ;  // Optimized version of code : O(N) c++ code editor
    }
}

///////////////////// OPTIMIZED CODE /////////////////////////////////

class Solution {
    public long maximumTripletValue(int[] nums) {
        int n = nums.length;
        // Step-1: Find right_max for all indices
        int[] rightMax = new int[n];
        int maxVal = nums[n - 1]; // last element
        for (int i = n - 2; i > 0; --i) {
            rightMax[i] = maxVal;
            maxVal = Math.max(maxVal, nums[i]);
        }

        // Step-2: Find max_triplet
        long maxTriplet = 0;
        maxVal = nums[0];
        for (int i = 1; i < n - 1; ++i) {
            maxTriplet = Math.max(maxTriplet, (long)(maxVal - nums[i]) * rightMax[i]);
            maxVal = Math.max(maxVal, nums[i]);
        }
        return maxTriplet;
    }
}

// Alternative Java Solution (Optimized Space)
class Solution {
    public long maximumTripletValue(int[] nums) {
        int n = nums.length;
        long maxDiff = 0;
        long maxLeft = 0;
        long maxVal = 0;
        for (int i = 0; i < n; ++i) {
            maxVal = Math.max(maxVal, maxDiff * nums[i]);
            maxDiff = Math.max(maxDiff, maxLeft - nums[i]);
            maxLeft = Math.max(maxLeft, nums[i]);
        }
        return maxVal;
    }
}
