Problem : Special Array part 2  : problem link : https://leetcode.com/problems/special-array-ii/?envType=daily-question&envId=2024-12-09  :leetcode 3152 

Problem Statement  : 
An array is considered special if every pair of its adjacent elements contains two numbers with different parity.
You are given an array of integer nums and a 2D integer matrix queries, where for queries[i] = [fromi, toi] your task is to check that 
subarray
nums[fromi..toi] is special or not.

Return an array of booleans answer such that answer[i] is true if nums[fromi..toi] is special.

Example 1:
Input: nums = [3,4,1,2,6], queries = [[0,4]]
Output: [false]
Explanation:
The subarray is [3,4,1,2,6]. 2 and 6 are both even.

Example 2:
Input: nums = [4,3,1,6], queries = [[0,2],[2,3]]
Output: [false,true]
Explanation:
The subarray is [4,3,1]. 3 and 1 are both odd. So the answer to this query is false.
The subarray is [1,6]. There is only one pair: (1,6) and it contains numbers with different parity. So the answer to this query is true.

/****************************/

ALGORITHMS AND APPROACH : 

class Solution {
    public boolean[] isArraySpecial(int[] nums, int[][] queries) {
        // Optimal Solution : using Prefix sum and Binary Search                                                       // OPTIMAL APPROACH 
        // step 1 , to previously adjecents if it is odd or even .
        int n = nums.length;
        int[] isPrespecial = new int[n];
        for(int i = 1 ; i < n ; i++){
            if(nums[i] % 2 == nums[i-1] % 2){
                isPrespecial[i] = 1 ;  // here in time n preprocess condtion checked 
            }
        }
        // step 2 , calculate the prefixSum and check direcly difference btw to and from
        // why we are doing this , we can directly know if 0 is result overall rum that means there is nothing 1 between from and to , that is what we wanna know , there is no one 1 should contains between both from and to index in prefix sum , that is importance of prefixsum 
        int prefixSum[] = new int[n];
        for(int i = 1 ; i < n ; i++){
              prefixSum[i] = prefixSum[i-1] + isPrespecial[i]; // here we exaclty know and sure about that 0 and 1 result at index 
        } 

        boolean[] ans = new boolean[queries.length]; // boolean arry are going to till queries size 
        for(int query = 0 ; query < queries.length ;query++){
            int from = queries[query][0];
            int to = queries[query][1];

            boolean isSpecial = (prefixSum[to] - prefixSum[from] == 0 ) ;
            
            ans[query] = isSpecial;
        }
        return ans  ;

        // time complexity : O(N) + O(N) + (K) , N for Nums length and K for Queries length 
        // Space complexity : O(N) for preSpecial and O(N) for prefixSum Calculation 


/*****************************/
                                                                                           // BETTER APPROACH //
     /*
     // actually , although we can also use this manually check without calculating the prefix sum but there will be check for each query range , like this and this will take O(p * q) approach for queries
      
      for(int[] query : queries){
        int from = query[0];
        int to = query[1];
         boolean dec = true ;
        for(int i = from ; i <= to ;i++){
             if(iPrespecial == 1){
                  dec = false ;
                  break ;
             }
        }
        res.add(dec);  // here we are using nested , so this will not work also , better solution 
      }



     */


/*************************************/
                                                                                           // BRUTE FORCE APPROACH //

       /* // Native Approach (Brute Force) Linear iteration
         List<Boolean> ans = new ArrayList<>();

         // iterating over the query 
         for(int[] query : queries){
            int from = query[0];
            int to = query[1];

            boolean decision = true ;
               // now iterationg over the array and check for each subarray generetad strt from to end
               for(int i = from ; i < to ; i++){
                  if(nums[i] % 2 == nums[i+1] % 2){
                       decision = false ;
                       break ;
                  }
               } 
               ans.add(decision);
           }
           // Convert List<Boolean> to boolean[]
           boolean[] result = new boolean[ans.size()];
           for (int i = 0; i < ans.size(); i++) {
              result[i] = ans.get(i);
           }
         return result ;    // time taking O(K*N)*N where k is size of query and N is nums size 

         */

    } 
}
