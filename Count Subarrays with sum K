
problem : Count Subarrays with sum K

Problem Statement : 
Given an unsorted array arr[] of integers, find the number of subarrays whose sum exactly equal to a given number k.

Examples:
Input: arr[] = [10, 2, -2, -20, 10], k = -10
Output: 3
Explaination: Subarrays: arr[0...3], arr[1...4], arr[3...4] have sum exactly equal to -10.

Input: arr[] = [9, 4, 20, 3, 10, 5], k = 33
Output: 2
Explaination: Subarrays: arr[0...2], arr[2...4] have sum exactly equal to 33.

Input: arr[] = [1, 3, 5], k = 0
Output: 0
Explaination: No subarray with 0 sum.

Constraints:
1 ≤ arr.size() ≤ 105
-103 ≤ arr[i] ≤ 103
-105 ≤ k ≤ 105

Expected Complexities
Time Complexity: O(n)
Auxiliary Space: O(n)

Solutions :

// Brute Force solution : In O(n^2) time 

#include <iostream>
#include <vector>
using namespace std;

int cntSubarrays(vector<int>& arr, int k) {
    
    int size = arr.size();
    
    // for maintaing the count of
    // subarrays whose sum equal to k
    int count = 0;
    for(int i = 0; i < size; i++){
        
        int currSum = 0;
        
        // subarray from i to each j -> arr[i....j]
        for(int j = i; j < size; j++){
            currSum += arr[j];
            
            // increment count if the currSum equal to k
            count += (currSum == k);
        }
    }
    
    return count;
}

int main() {
    vector<int> arr = {10, 2, -2, -20, 10};
    int k = -10;
    cout << cntSubarrays(arr, k);
    return 0;
}


/// Optimal solution in : O(N) time with O(N) Space 

class Solution {
  public:
    int cntSubarrays(vector<int> &arr, int k) {
        // code here
        int n = arr.size();
        int ans = 0 ;
        unordered_map<int,int> mp ;
        int curr_sum = 0 ;
        
        for(int i = 0 ; i < n ;i++){
            curr_sum += arr[i];
            
            if(curr_sum == k) ans++ ;
            
            if(mp.find(curr_sum - k) != mp.end()){ // if prefix sum exist then we add the value in ans overall count
                ans += mp[curr_sum - k];
            }
            
            // other wise each time we keep setting the curr_sum in map with increasing count
            mp[curr_sum]++ ;
        }
        
        return ans ;
    }
};
