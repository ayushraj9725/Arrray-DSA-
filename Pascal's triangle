Problem : Pascal's triangle

Problem Statement : 
Given an integer rowIndex, return the rowIndexth (0-indexed) row of the Pascal's triangle.
In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:


Example 1:
Input: rowIndex = 3
Output: [1,3,3,1]

Example 2:
Input: rowIndex = 0
Output: [1]

Example 3:
Input: rowIndex = 1
Output: [1,1]
 
Constraints:
0 <= rowIndex <= 33

Problem Solution : 

//////  C++ Implementation  //////

class Solution {
public:
    vector<int> getRow(int rowIndex) {

        vector<int> ans ; 
        long long v = 1 ;
        ans.push_back(v);
        for(int i = 1 ; i <= rowIndex ; i++){
            v = v * (rowIndex - i+1);
            v = v / i ;
            ans.push_back((int)v);
        }

        return ans ;
    }
};


//////  Java Implementation  //////

import java.util.*;
class Solution {
    public List<Integer> getRow(int rowIndex) {
        // taking an arrayList to return the result 
        ArrayList<Integer> result = new ArrayList<>();
        long ans = 1 ;
        result.add((int)ans); // adding 1st value that is 1 always 
        for(int i = 1 ; i <= rowIndex ;i++){
              ans = ans * (rowIndex - i + 1);
              ans = ans / i ;
              result.add((int)ans) ;
        }

        return result ;  // return result at the end time complexity will O(N!)
    }
}
