Problem  : Maximum Product : link : https://www.naukri.com/code360/problems/subarray-with-maximum-product_6890008?leftPanelTabValue=SUBMISSION
         leetcode : https://leetcode.com/problems/maximum-product-subarray/

Problem Statement  :Given an integer array nums, find a subarray
 that has the largest product, and return the product. The test cases are generated so that the answer will fit in a 32-bit integer.

Example 1:
Input: nums = [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6.

Example 2:
Input: nums = [-2,0,-1]
Output: 0
Explanation: The result cannot be 2, because [-2,-1] is not a subarray.

/****************/
Code : in java Both approach , Brute and Optimal 
public class Solution {
    public static int subarrayWithMaxProduct(int []arr){
         // Optimal solution : Using observing from both side and calculate product , stored into prefix and sufffix , update it when see product is greater than zero
         // when get any zero and prefix , suffix both get zero then stored 1 into both suffix and prefix , after the iteration of entire loop in (N) time we get the maxi product
          int n = arr.length ;
          int maxPro = Integer.MIN_VALUE ;
          int prefix = 1 , suffix = 1 ;
          for(int i = 0 ; i < arr.length ;i++){
              if(prefix == 0) prefix = 1 ; // calculate again product from just next to 0 and it will go to miximize again and again
              if(suffix == 0) suffix = 1 ; // same as prefix it will work

                    prefix *= arr[i] ;  // calculating and storing if prefix result all time getting greater than zero and same thing for suffix 
                    suffix *= arr[n-1-i] ; 
              // and now we are maximising the both prefix and suffix 
              int pro = Math.max(prefix,suffix); 

              // here maximize overall product
              maxPro = Math.max(maxPro,pro) ;
          }
          return maxPro ;
       
       // Time complexity : O(N) only taken hee to get maxxiproduct 






     /*   // Brute force solution 
        int maxPro = Integer.MIN_VALUE ;
        for(int i = 0 ; i < arr.length ; i++){
            int pro = 1 ;
            for(int j = i ; j < arr.length ; j++){
                 pro *= arr[j] ;
                 maxPro = Math.max(maxPro,pro) ;
            }
        }
        return maxPro ; // time complexity : O(N*N) not space

        */

    }
}

/****************
NEVER USED THIS ALL THE TIME < BECAUSE IT WILL NOT WORK IN ALL CASE 
class Solution {
    public int maxProduct(int[] nums) {
   /*     int min = 1 , maxpro = 0 ;
        for(int i = 0 ; i < nums.length ;i++){
            min = min * nums[i] ;
            if(maxpro > 0){
                maxpro = min ;
            }
            if(min < 0){
                min = 1 ;
            }
        }
        if(min == 1) return 0 ;
        // otherwise 
        return maxpro ;
      // this approach will not work crearly in all the cases 
        */  
    }
}


****************//
